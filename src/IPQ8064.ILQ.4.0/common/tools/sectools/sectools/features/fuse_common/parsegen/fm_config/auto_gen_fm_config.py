#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated  by generateDS.py version 2.7b.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class regions(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, qid=None, chip=None, accType=None, name=None, sections=None):
        self.qid = _cast(None, qid)
        self.chip = _cast(None, chip)
        self.accType = _cast(None, accType)
        self.name = _cast(None, name)
        if sections is None:
            self.sections = []
        else:
            self.sections = sections
    def factory(*args_, **kwargs_):
        if regions.subclass:
            return regions.subclass(*args_, **kwargs_)
        else:
            return regions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sections(self): return self.sections
    def set_sections(self, sections): self.sections = sections
    def add_sections(self, value): self.sections.append(value)
    def insert_sections(self, index, value): self.sections[index] = value
    def get_qid(self): return self.qid
    def set_qid(self, qid): self.qid = qid
    def get_chip(self): return self.chip
    def set_chip(self, chip): self.chip = chip
    def get_accType(self): return self.accType
    def set_accType(self, accType): self.accType = accType
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def export(self, outfile, level, namespace_='', name_='regions', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='regions')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='regions'):
        if self.qid is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            outfile.write(' qid=%s' % (self.gds_format_string(quote_attrib(self.qid).encode(ExternalEncoding), input_name='qid'), ))
        if self.chip is not None and 'chip' not in already_processed:
            already_processed.append('chip')
            outfile.write(' chip=%s' % (self.gds_format_string(quote_attrib(self.chip).encode(ExternalEncoding), input_name='chip'), ))
        if self.accType is not None and 'accType' not in already_processed:
            already_processed.append('accType')
            outfile.write(' accType=%s' % (self.gds_format_string(quote_attrib(self.accType).encode(ExternalEncoding), input_name='accType'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='regions', fromsubclass_=False):
        for sections_ in self.sections:
            sections_.export(outfile, level, namespace_, name_='sections')
    def hasContent_(self):
        if (
            self.sections
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='regions'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.qid is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            showIndent(outfile, level)
            outfile.write('qid = "%s",\n' % (self.qid,))
        if self.chip is not None and 'chip' not in already_processed:
            already_processed.append('chip')
            showIndent(outfile, level)
            outfile.write('chip = "%s",\n' % (self.chip,))
        if self.accType is not None and 'accType' not in already_processed:
            already_processed.append('accType')
            showIndent(outfile, level)
            outfile.write('accType = "%s",\n' % (self.accType,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('sections=[\n')
        level += 1
        for sections_ in self.sections:
            showIndent(outfile, level)
            outfile.write('model_.sectionsType(\n')
            sections_.exportLiteral(outfile, level, name_='sectionsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('qid', node)
        if value is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            self.qid = value
        value = find_attr_value_('chip', node)
        if value is not None and 'chip' not in already_processed:
            already_processed.append('chip')
            self.chip = value
        value = find_attr_value_('accType', node)
        if value is not None and 'accType' not in already_processed:
            already_processed.append('accType')
            self.accType = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'sections':
            obj_ = sectionsType.factory()
            obj_.build(child_)
            self.sections.append(obj_)
# end class regions


class topResource(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, href=None):
        self.href = _cast(None, href)
        pass
    def factory(*args_, **kwargs_):
        if topResource.subclass:
            return topResource.subclass(*args_, **kwargs_)
        else:
            return topResource(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def export(self, outfile, level, namespace_='', name_='topResource', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='topResource')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='topResource'):
        if self.href is not None and 'href' not in already_processed:
            already_processed.append('href')
            outfile.write(' href=%s' % (self.gds_format_string(quote_attrib(self.href).encode(ExternalEncoding), input_name='href'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='topResource', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='topResource'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.href is not None and 'href' not in already_processed:
            already_processed.append('href')
            showIndent(outfile, level)
            outfile.write('href = "%s",\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('href', node)
        if value is not None and 'href' not in already_processed:
            already_processed.append('href')
            self.href = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class topResource


class FuseComponentExtension(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, securityControlBaseAddr=None, version=None, baseChipID=None, regions=None, topResource=None):
        self.securityControlBaseAddr = _cast(None, securityControlBaseAddr)
        self.version = _cast(None, version)
        self.baseChipID = _cast(None, baseChipID)
        if regions is None:
            self.regions = []
        else:
            self.regions = regions
        self.topResource = topResource
    def factory(*args_, **kwargs_):
        if FuseComponentExtension.subclass:
            return FuseComponentExtension.subclass(*args_, **kwargs_)
        else:
            return FuseComponentExtension(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_regions(self): return self.regions
    def set_regions(self, regions): self.regions = regions
    def add_regions(self, value): self.regions.append(value)
    def insert_regions(self, index, value): self.regions[index] = value
    def get_topResource(self): return self.topResource
    def set_topResource(self, topResource): self.topResource = topResource
    def get_securityControlBaseAddr(self): return self.securityControlBaseAddr
    def set_securityControlBaseAddr(self, securityControlBaseAddr): self.securityControlBaseAddr = securityControlBaseAddr
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_baseChipID(self): return self.baseChipID
    def set_baseChipID(self, baseChipID): self.baseChipID = baseChipID
    def export(self, outfile, level, namespace_='', name_='FuseComponentExtension', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FuseComponentExtension')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FuseComponentExtension'):
        if self.securityControlBaseAddr is not None and 'securityControlBaseAddr' not in already_processed:
            already_processed.append('securityControlBaseAddr')
            outfile.write(' securityControlBaseAddr=%s' % (self.gds_format_string(quote_attrib(self.securityControlBaseAddr).encode(ExternalEncoding), input_name='securityControlBaseAddr'), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        if self.baseChipID is not None and 'baseChipID' not in already_processed:
            already_processed.append('baseChipID')
            outfile.write(' baseChipID=%s' % (self.gds_format_string(quote_attrib(self.baseChipID).encode(ExternalEncoding), input_name='baseChipID'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='FuseComponentExtension', fromsubclass_=False):
        for regions_ in self.regions:
            regions_.export(outfile, level, namespace_, name_='regions')
        if self.topResource is not None:
            self.topResource.export(outfile, level, namespace_, name_='topResource', )
    def hasContent_(self):
        if (
            self.regions or
            self.topResource is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FuseComponentExtension'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.securityControlBaseAddr is not None and 'securityControlBaseAddr' not in already_processed:
            already_processed.append('securityControlBaseAddr')
            showIndent(outfile, level)
            outfile.write('securityControlBaseAddr = "%s",\n' % (self.securityControlBaseAddr,))
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            showIndent(outfile, level)
            outfile.write('version = "%s",\n' % (self.version,))
        if self.baseChipID is not None and 'baseChipID' not in already_processed:
            already_processed.append('baseChipID')
            showIndent(outfile, level)
            outfile.write('baseChipID = "%s",\n' % (self.baseChipID,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('regions=[\n')
        level += 1
        for regions_ in self.regions:
            showIndent(outfile, level)
            outfile.write('model_.regions(\n')
            regions_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.topResource is not None:
            showIndent(outfile, level)
            outfile.write('topResource=model_.topResource(\n')
            self.topResource.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('securityControlBaseAddr', node)
        if value is not None and 'securityControlBaseAddr' not in already_processed:
            already_processed.append('securityControlBaseAddr')
            self.securityControlBaseAddr = value
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.append('version')
            self.version = value
        value = find_attr_value_('baseChipID', node)
        if value is not None and 'baseChipID' not in already_processed:
            already_processed.append('baseChipID')
            self.baseChipID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'regions':
            obj_ = regions.factory()
            obj_.build(child_)
            self.regions.append(obj_)
        elif nodeName_ == 'topResource':
            obj_ = topResource.factory()
            obj_.build(child_)
            self.set_topResource(obj_)
# end class FuseComponentExtension


class sectionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, endBitInRegion=None, name=None, qid=None, startBitInRegion=None, endColumnID=None, startColumnID=None, otpRowID=None, fuses=None, fec=None):
        self.endBitInRegion = _cast(int, endBitInRegion)
        self.name = _cast(None, name)
        self.qid = _cast(None, qid)
        self.startBitInRegion = _cast(int, startBitInRegion)
        self.endColumnID = _cast(int, endColumnID)
        self.startColumnID = _cast(int, startColumnID)
        self.otpRowID = _cast(int, otpRowID)
        if fuses is None:
            self.fuses = []
        else:
            self.fuses = fuses
        self.fec = fec
    def factory(*args_, **kwargs_):
        if sectionsType.subclass:
            return sectionsType.subclass(*args_, **kwargs_)
        else:
            return sectionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_fuses(self): return self.fuses
    def set_fuses(self, fuses): self.fuses = fuses
    def add_fuses(self, value): self.fuses.append(value)
    def insert_fuses(self, index, value): self.fuses[index] = value
    def get_fec(self): return self.fec
    def set_fec(self, fec): self.fec = fec
    def get_endBitInRegion(self): return self.endBitInRegion
    def set_endBitInRegion(self, endBitInRegion): self.endBitInRegion = endBitInRegion
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_qid(self): return self.qid
    def set_qid(self, qid): self.qid = qid
    def get_startBitInRegion(self): return self.startBitInRegion
    def set_startBitInRegion(self, startBitInRegion): self.startBitInRegion = startBitInRegion
    def get_endColumnID(self): return self.endColumnID
    def set_endColumnID(self, endColumnID): self.endColumnID = endColumnID
    def get_startColumnID(self): return self.startColumnID
    def set_startColumnID(self, startColumnID): self.startColumnID = startColumnID
    def get_otpRowID(self): return self.otpRowID
    def set_otpRowID(self, otpRowID): self.otpRowID = otpRowID
    def export(self, outfile, level, namespace_='', name_='sectionsType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sectionsType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sectionsType'):
        if self.endBitInRegion is not None and 'endBitInRegion' not in already_processed:
            already_processed.append('endBitInRegion')
            outfile.write(' endBitInRegion="%s"' % self.gds_format_integer(self.endBitInRegion, input_name='endBitInRegion'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.qid is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            outfile.write(' qid=%s' % (self.gds_format_string(quote_attrib(self.qid).encode(ExternalEncoding), input_name='qid'), ))
        if self.startBitInRegion is not None and 'startBitInRegion' not in already_processed:
            already_processed.append('startBitInRegion')
            outfile.write(' startBitInRegion="%s"' % self.gds_format_integer(self.startBitInRegion, input_name='startBitInRegion'))
        if self.endColumnID is not None and 'endColumnID' not in already_processed:
            already_processed.append('endColumnID')
            outfile.write(' endColumnID="%s"' % self.gds_format_integer(self.endColumnID, input_name='endColumnID'))
        if self.startColumnID is not None and 'startColumnID' not in already_processed:
            already_processed.append('startColumnID')
            outfile.write(' startColumnID="%s"' % self.gds_format_integer(self.startColumnID, input_name='startColumnID'))
        if self.otpRowID is not None and 'otpRowID' not in already_processed:
            already_processed.append('otpRowID')
            outfile.write(' otpRowID="%s"' % self.gds_format_integer(self.otpRowID, input_name='otpRowID'))
    def exportChildren(self, outfile, level, namespace_='', name_='sectionsType', fromsubclass_=False):
        for fuses_ in self.fuses:
            fuses_.export(outfile, level, namespace_, name_='fuses')
        if self.fec is not None:
            self.fec.export(outfile, level, namespace_, name_='fec')
    def hasContent_(self):
        if (
            self.fuses or
            self.fec is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='sectionsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.endBitInRegion is not None and 'endBitInRegion' not in already_processed:
            already_processed.append('endBitInRegion')
            showIndent(outfile, level)
            outfile.write('endBitInRegion = %d,\n' % (self.endBitInRegion,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.qid is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            showIndent(outfile, level)
            outfile.write('qid = "%s",\n' % (self.qid,))
        if self.startBitInRegion is not None and 'startBitInRegion' not in already_processed:
            already_processed.append('startBitInRegion')
            showIndent(outfile, level)
            outfile.write('startBitInRegion = %d,\n' % (self.startBitInRegion,))
        if self.endColumnID is not None and 'endColumnID' not in already_processed:
            already_processed.append('endColumnID')
            showIndent(outfile, level)
            outfile.write('endColumnID = %d,\n' % (self.endColumnID,))
        if self.startColumnID is not None and 'startColumnID' not in already_processed:
            already_processed.append('startColumnID')
            showIndent(outfile, level)
            outfile.write('startColumnID = %d,\n' % (self.startColumnID,))
        if self.otpRowID is not None and 'otpRowID' not in already_processed:
            already_processed.append('otpRowID')
            showIndent(outfile, level)
            outfile.write('otpRowID = %d,\n' % (self.otpRowID,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('fuses=[\n')
        level += 1
        for fuses_ in self.fuses:
            showIndent(outfile, level)
            outfile.write('model_.fusesType(\n')
            fuses_.exportLiteral(outfile, level, name_='fusesType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.fec is not None:
            showIndent(outfile, level)
            outfile.write('fec=model_.fecType(\n')
            self.fec.exportLiteral(outfile, level, name_='fec')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('endBitInRegion', node)
        if value is not None and 'endBitInRegion' not in already_processed:
            already_processed.append('endBitInRegion')
            try:
                self.endBitInRegion = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('qid', node)
        if value is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            self.qid = value
        value = find_attr_value_('startBitInRegion', node)
        if value is not None and 'startBitInRegion' not in already_processed:
            already_processed.append('startBitInRegion')
            try:
                self.startBitInRegion = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('endColumnID', node)
        if value is not None and 'endColumnID' not in already_processed:
            already_processed.append('endColumnID')
            try:
                self.endColumnID = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('startColumnID', node)
        if value is not None and 'startColumnID' not in already_processed:
            already_processed.append('startColumnID')
            try:
                self.startColumnID = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('otpRowID', node)
        if value is not None and 'otpRowID' not in already_processed:
            already_processed.append('otpRowID')
            try:
                self.otpRowID = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'fuses':
            obj_ = fusesType.factory()
            obj_.build(child_)
            self.fuses.append(obj_)
        elif nodeName_ == 'fec':
            obj_ = fecType.factory()
            obj_.build(child_)
            self.set_fec(obj_)
# end class sectionsType


class fusesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, fuseSensed=None, qid=None, bitNum=None, binaryCompatible=None, funcCategory=None, blowStage=None, owner=None, OEMvisible=None, intComment=None, destModule=None, row=None, destPathAndPortMap=None, HWPath=None, OverLoadedFunc=None):
        self.name = _cast(None, name)
        self.fuseSensed = _cast(bool, fuseSensed)
        self.qid = _cast(None, qid)
        self.bitNum = _cast(int, bitNum)
        self.binaryCompatible = _cast(bool, binaryCompatible)
        self.funcCategory = _cast(None, funcCategory)
        self.blowStage = _cast(None, blowStage)
        self.owner = _cast(None, owner)
        self.OEMvisible = _cast(bool, OEMvisible)
        self.intComment = _cast(None, intComment)
        self.destModule = _cast(None, destModule)
        self.row = _cast(int, row)
        self.destPathAndPortMap = destPathAndPortMap
        self.HWPath = HWPath
        if OverLoadedFunc is None:
            self.OverLoadedFunc = []
        else:
            self.OverLoadedFunc = OverLoadedFunc
    def factory(*args_, **kwargs_):
        if fusesType.subclass:
            return fusesType.subclass(*args_, **kwargs_)
        else:
            return fusesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_destPathAndPortMap(self): return self.destPathAndPortMap
    def set_destPathAndPortMap(self, destPathAndPortMap): self.destPathAndPortMap = destPathAndPortMap
    def get_HWPath(self): return self.HWPath
    def set_HWPath(self, HWPath): self.HWPath = HWPath
    def get_OverLoadedFunc(self): return self.OverLoadedFunc
    def set_OverLoadedFunc(self, OverLoadedFunc): self.OverLoadedFunc = OverLoadedFunc
    def add_OverLoadedFunc(self, value): self.OverLoadedFunc.append(value)
    def insert_OverLoadedFunc(self, index, value): self.OverLoadedFunc[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_fuseSensed(self): return self.fuseSensed
    def set_fuseSensed(self, fuseSensed): self.fuseSensed = fuseSensed
    def get_qid(self): return self.qid
    def set_qid(self, qid): self.qid = qid
    def get_bitNum(self): return self.bitNum
    def set_bitNum(self, bitNum): self.bitNum = bitNum
    def get_binaryCompatible(self): return self.binaryCompatible
    def set_binaryCompatible(self, binaryCompatible): self.binaryCompatible = binaryCompatible
    def get_funcCategory(self): return self.funcCategory
    def set_funcCategory(self, funcCategory): self.funcCategory = funcCategory
    def get_blowStage(self): return self.blowStage
    def set_blowStage(self, blowStage): self.blowStage = blowStage
    def get_owner(self): return self.owner
    def set_owner(self, owner): self.owner = owner
    def get_OEMvisible(self): return self.OEMvisible
    def set_OEMvisible(self, OEMvisible): self.OEMvisible = OEMvisible
    def get_intComment(self): return self.intComment
    def set_intComment(self, intComment): self.intComment = intComment
    def get_destModule(self): return self.destModule
    def set_destModule(self, destModule): self.destModule = destModule
    def get_row(self): return self.row
    def set_row(self, row): self.row = row
    def export(self, outfile, level, namespace_='', name_='fusesType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='fusesType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='fusesType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.fuseSensed is not None and 'fuseSensed' not in already_processed:
            already_processed.append('fuseSensed')
            outfile.write(' fuseSensed="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.fuseSensed)), input_name='fuseSensed'))
        if self.qid is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            outfile.write(' qid=%s' % (self.gds_format_string(quote_attrib(self.qid).encode(ExternalEncoding), input_name='qid'), ))
        if self.bitNum is not None and 'bitNum' not in already_processed:
            already_processed.append('bitNum')
            outfile.write(' bitNum="%s"' % self.gds_format_integer(self.bitNum, input_name='bitNum'))
        if self.binaryCompatible is not None and 'binaryCompatible' not in already_processed:
            already_processed.append('binaryCompatible')
            outfile.write(' binaryCompatible="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.binaryCompatible)), input_name='binaryCompatible'))
        if self.funcCategory is not None and 'funcCategory' not in already_processed:
            already_processed.append('funcCategory')
            outfile.write(' funcCategory=%s' % (self.gds_format_string(quote_attrib(self.funcCategory).encode(ExternalEncoding), input_name='funcCategory'), ))
        if self.blowStage is not None and 'blowStage' not in already_processed:
            already_processed.append('blowStage')
            outfile.write(' blowStage=%s' % (self.gds_format_string(quote_attrib(self.blowStage).encode(ExternalEncoding), input_name='blowStage'), ))
        if self.owner is not None and 'owner' not in already_processed:
            already_processed.append('owner')
            outfile.write(' owner=%s' % (self.gds_format_string(quote_attrib(self.owner).encode(ExternalEncoding), input_name='owner'), ))
        if self.OEMvisible is not None and 'OEMvisible' not in already_processed:
            already_processed.append('OEMvisible')
            outfile.write(' OEMvisible="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.OEMvisible)), input_name='OEMvisible'))
        if self.intComment is not None and 'intComment' not in already_processed:
            already_processed.append('intComment')
            outfile.write(' intComment=%s' % (self.gds_format_string(quote_attrib(self.intComment).encode(ExternalEncoding), input_name='intComment'), ))
        if self.destModule is not None and 'destModule' not in already_processed:
            already_processed.append('destModule')
            outfile.write(' destModule=%s' % (self.gds_format_string(quote_attrib(self.destModule).encode(ExternalEncoding), input_name='destModule'), ))
        if self.row is not None and 'row' not in already_processed:
            already_processed.append('row')
            outfile.write(' row="%s"' % self.gds_format_integer(self.row, input_name='row'))
    def exportChildren(self, outfile, level, namespace_='', name_='fusesType', fromsubclass_=False):
        if self.destPathAndPortMap is not None:
            self.destPathAndPortMap.export(outfile, level, namespace_, name_='destPathAndPortMap')
        if self.HWPath is not None:
            showIndent(outfile, level)
            outfile.write('<%sHWPath>%s</%sHWPath>\n' % (namespace_, self.gds_format_string(quote_xml(self.HWPath).encode(ExternalEncoding), input_name='HWPath'), namespace_))
        for OverLoadedFunc_ in self.OverLoadedFunc:
            OverLoadedFunc_.export(outfile, level, namespace_, name_='OverLoadedFunc')
    def hasContent_(self):
        if (
            self.destPathAndPortMap is not None or
            self.HWPath is not None or
            self.OverLoadedFunc
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='fusesType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.fuseSensed is not None and 'fuseSensed' not in already_processed:
            already_processed.append('fuseSensed')
            showIndent(outfile, level)
            outfile.write('fuseSensed = %s,\n' % (self.fuseSensed,))
        if self.qid is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            showIndent(outfile, level)
            outfile.write('qid = "%s",\n' % (self.qid,))
        if self.bitNum is not None and 'bitNum' not in already_processed:
            already_processed.append('bitNum')
            showIndent(outfile, level)
            outfile.write('bitNum = %d,\n' % (self.bitNum,))
        if self.binaryCompatible is not None and 'binaryCompatible' not in already_processed:
            already_processed.append('binaryCompatible')
            showIndent(outfile, level)
            outfile.write('binaryCompatible = %s,\n' % (self.binaryCompatible,))
        if self.funcCategory is not None and 'funcCategory' not in already_processed:
            already_processed.append('funcCategory')
            showIndent(outfile, level)
            outfile.write('funcCategory = "%s",\n' % (self.funcCategory,))
        if self.blowStage is not None and 'blowStage' not in already_processed:
            already_processed.append('blowStage')
            showIndent(outfile, level)
            outfile.write('blowStage = "%s",\n' % (self.blowStage,))
        if self.owner is not None and 'owner' not in already_processed:
            already_processed.append('owner')
            showIndent(outfile, level)
            outfile.write('owner = "%s",\n' % (self.owner,))
        if self.OEMvisible is not None and 'OEMvisible' not in already_processed:
            already_processed.append('OEMvisible')
            showIndent(outfile, level)
            outfile.write('OEMvisible = %s,\n' % (self.OEMvisible,))
        if self.intComment is not None and 'intComment' not in already_processed:
            already_processed.append('intComment')
            showIndent(outfile, level)
            outfile.write('intComment = "%s",\n' % (self.intComment,))
        if self.destModule is not None and 'destModule' not in already_processed:
            already_processed.append('destModule')
            showIndent(outfile, level)
            outfile.write('destModule = "%s",\n' % (self.destModule,))
        if self.row is not None and 'row' not in already_processed:
            already_processed.append('row')
            showIndent(outfile, level)
            outfile.write('row = %d,\n' % (self.row,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.destPathAndPortMap is not None:
            showIndent(outfile, level)
            outfile.write('destPathAndPortMap=model_.destPathAndPortMapType(\n')
            self.destPathAndPortMap.exportLiteral(outfile, level, name_='destPathAndPortMap')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.HWPath is not None:
            showIndent(outfile, level)
            outfile.write('HWPath=%s,\n' % quote_python(self.HWPath).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('OverLoadedFunc=[\n')
        level += 1
        for OverLoadedFunc_ in self.OverLoadedFunc:
            showIndent(outfile, level)
            outfile.write('model_.OverLoadedFuncType(\n')
            OverLoadedFunc_.exportLiteral(outfile, level, name_='OverLoadedFuncType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('fuseSensed', node)
        if value is not None and 'fuseSensed' not in already_processed:
            already_processed.append('fuseSensed')
            if value in ('true', '1'):
                self.fuseSensed = True
            elif value in ('false', '0'):
                self.fuseSensed = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('qid', node)
        if value is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            self.qid = value
        value = find_attr_value_('bitNum', node)
        if value is not None and 'bitNum' not in already_processed:
            already_processed.append('bitNum')
            try:
                self.bitNum = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('binaryCompatible', node)
        if value is not None and 'binaryCompatible' not in already_processed:
            already_processed.append('binaryCompatible')
            if value in ('true', '1'):
                self.binaryCompatible = True
            elif value in ('false', '0'):
                self.binaryCompatible = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('funcCategory', node)
        if value is not None and 'funcCategory' not in already_processed:
            already_processed.append('funcCategory')
            self.funcCategory = value
        value = find_attr_value_('blowStage', node)
        if value is not None and 'blowStage' not in already_processed:
            already_processed.append('blowStage')
            self.blowStage = value
        value = find_attr_value_('owner', node)
        if value is not None and 'owner' not in already_processed:
            already_processed.append('owner')
            self.owner = value
        value = find_attr_value_('OEMvisible', node)
        if value is not None and 'OEMvisible' not in already_processed:
            already_processed.append('OEMvisible')
            if value in ('true', '1'):
                self.OEMvisible = True
            elif value in ('false', '0'):
                self.OEMvisible = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('intComment', node)
        if value is not None and 'intComment' not in already_processed:
            already_processed.append('intComment')
            self.intComment = value
        value = find_attr_value_('destModule', node)
        if value is not None and 'destModule' not in already_processed:
            already_processed.append('destModule')
            self.destModule = value
        value = find_attr_value_('row', node)
        if value is not None and 'row' not in already_processed:
            already_processed.append('row')
            try:
                self.row = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'destPathAndPortMap':
            obj_ = destPathAndPortMapType.factory()
            obj_.build(child_)
            self.set_destPathAndPortMap(obj_)
        elif nodeName_ == 'HWPath':
            HWPath_ = child_.text
            HWPath_ = self.gds_validate_string(HWPath_, node, 'HWPath')
            self.HWPath = HWPath_
        elif nodeName_ == 'OverLoadedFunc':
            obj_ = OverLoadedFuncType.factory()
            obj_.build(child_)
            self.OverLoadedFunc.append(obj_)
# end class fusesType


class destPathAndPortMapType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None):
        self.key = _cast(None, key)
        if value is None:
            self.value = []
        else:
            self.value = value
    def factory(*args_, **kwargs_):
        if destPathAndPortMapType.subclass:
            return destPathAndPortMapType.subclass(*args_, **kwargs_)
        else:
            return destPathAndPortMapType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def add_value(self, value): self.value.append(value)
    def insert_value(self, index, value): self.value[index] = value
    def get_key(self): return self.key
    def set_key(self, key): self.key = key
    def export(self, outfile, level, namespace_='', name_='destPathAndPortMapType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='destPathAndPortMapType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='destPathAndPortMapType'):
        if self.key is not None and 'key' not in already_processed:
            already_processed.append('key')
            outfile.write(' key=%s' % (self.gds_format_string(quote_attrib(self.key).encode(ExternalEncoding), input_name='key'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='destPathAndPortMapType', fromsubclass_=False):
        for value_ in self.value:
            showIndent(outfile, level)
            outfile.write('<%svalue>%s</%svalue>\n' % (namespace_, self.gds_format_string(quote_xml(value_).encode(ExternalEncoding), input_name='value'), namespace_))
    def hasContent_(self):
        if (
            self.value
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='destPathAndPortMapType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.key is not None and 'key' not in already_processed:
            already_processed.append('key')
            showIndent(outfile, level)
            outfile.write('key = "%s",\n' % (self.key,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('value=[\n')
        level += 1
        for value_ in self.value:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(value_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('key', node)
        if value is not None and 'key' not in already_processed:
            already_processed.append('key')
            self.key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value.append(value_)
# end class destPathAndPortMapType


class OverLoadedFuncType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None, key=None):
        self.value = _cast(None, value)
        self.key = _cast(None, key)
        pass
    def factory(*args_, **kwargs_):
        if OverLoadedFuncType.subclass:
            return OverLoadedFuncType.subclass(*args_, **kwargs_)
        else:
            return OverLoadedFuncType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def get_key(self): return self.key
    def set_key(self, key): self.key = key
    def export(self, outfile, level, namespace_='', name_='OverLoadedFuncType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OverLoadedFuncType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OverLoadedFuncType'):
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
        if self.key is not None and 'key' not in already_processed:
            already_processed.append('key')
            outfile.write(' key=%s' % (self.gds_format_string(quote_attrib(self.key).encode(ExternalEncoding), input_name='key'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OverLoadedFuncType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='OverLoadedFuncType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            showIndent(outfile, level)
            outfile.write('value = "%s",\n' % (self.value,))
        if self.key is not None and 'key' not in already_processed:
            already_processed.append('key')
            showIndent(outfile, level)
            outfile.write('key = "%s",\n' % (self.key,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.append('value')
            self.value = value
        value = find_attr_value_('key', node)
        if value is not None and 'key' not in already_processed:
            already_processed.append('key')
            self.key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OverLoadedFuncType


class fecType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, qid=None, startColumnID=None, name=None, otpRowID=None, endColumnID=None):
        self.qid = _cast(None, qid)
        self.startColumnID = _cast(int, startColumnID)
        self.name = _cast(None, name)
        self.otpRowID = _cast(int, otpRowID)
        self.endColumnID = _cast(int, endColumnID)
        pass
    def factory(*args_, **kwargs_):
        if fecType.subclass:
            return fecType.subclass(*args_, **kwargs_)
        else:
            return fecType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_qid(self): return self.qid
    def set_qid(self, qid): self.qid = qid
    def get_startColumnID(self): return self.startColumnID
    def set_startColumnID(self, startColumnID): self.startColumnID = startColumnID
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_otpRowID(self): return self.otpRowID
    def set_otpRowID(self, otpRowID): self.otpRowID = otpRowID
    def get_endColumnID(self): return self.endColumnID
    def set_endColumnID(self, endColumnID): self.endColumnID = endColumnID
    def export(self, outfile, level, namespace_='', name_='fecType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='fecType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='fecType'):
        if self.qid is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            outfile.write(' qid=%s' % (self.gds_format_string(quote_attrib(self.qid).encode(ExternalEncoding), input_name='qid'), ))
        if self.startColumnID is not None and 'startColumnID' not in already_processed:
            already_processed.append('startColumnID')
            outfile.write(' startColumnID="%s"' % self.gds_format_integer(self.startColumnID, input_name='startColumnID'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.otpRowID is not None and 'otpRowID' not in already_processed:
            already_processed.append('otpRowID')
            outfile.write(' otpRowID="%s"' % self.gds_format_integer(self.otpRowID, input_name='otpRowID'))
        if self.endColumnID is not None and 'endColumnID' not in already_processed:
            already_processed.append('endColumnID')
            outfile.write(' endColumnID="%s"' % self.gds_format_integer(self.endColumnID, input_name='endColumnID'))
    def exportChildren(self, outfile, level, namespace_='', name_='fecType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='fecType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.qid is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            showIndent(outfile, level)
            outfile.write('qid = "%s",\n' % (self.qid,))
        if self.startColumnID is not None and 'startColumnID' not in already_processed:
            already_processed.append('startColumnID')
            showIndent(outfile, level)
            outfile.write('startColumnID = %d,\n' % (self.startColumnID,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.otpRowID is not None and 'otpRowID' not in already_processed:
            already_processed.append('otpRowID')
            showIndent(outfile, level)
            outfile.write('otpRowID = %d,\n' % (self.otpRowID,))
        if self.endColumnID is not None and 'endColumnID' not in already_processed:
            already_processed.append('endColumnID')
            showIndent(outfile, level)
            outfile.write('endColumnID = %d,\n' % (self.endColumnID,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('qid', node)
        if value is not None and 'qid' not in already_processed:
            already_processed.append('qid')
            self.qid = value
        value = find_attr_value_('startColumnID', node)
        if value is not None and 'startColumnID' not in already_processed:
            already_processed.append('startColumnID')
            try:
                self.startColumnID = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('otpRowID', node)
        if value is not None and 'otpRowID' not in already_processed:
            already_processed.append('otpRowID')
            try:
                self.otpRowID = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('endColumnID', node)
        if value is not None and 'endColumnID' not in already_processed:
            already_processed.append('endColumnID')
            try:
                self.endColumnID = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class fecType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'fusemaster'
        rootClass = fusemaster
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='xmlns:tns="http://www.qualcomm.com/fusemaster"')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'fusemaster'
        rootClass = fusemaster
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="fusemaster",
        namespacedef_='xmlns:tns="http://www.qualcomm.com/fusemaster"')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'fusemaster'
        rootClass = fusemaster
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from auto_gen_fm_config import *\n\n')
    sys.stdout.write('import auto_gen_fm_config as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "FuseComponentExtension",
    "OverLoadedFuncType",
    "destPathAndPortMapType",
    "fecType",
    "fusesType",
    "regions",
    "sectionsType",
    "topResource"
    ]
