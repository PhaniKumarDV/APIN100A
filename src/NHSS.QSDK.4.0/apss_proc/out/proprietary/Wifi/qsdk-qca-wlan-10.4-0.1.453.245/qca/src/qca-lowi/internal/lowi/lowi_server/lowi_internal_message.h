#ifndef __LOWI_INTERNAL_MESSAGE_H__
#define __LOWI_INTERNAL_MESSAGE_H__

/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*
LOWI Internal Message Interface Header file

GENERAL DESCRIPTION
  This file contains the structure definitions and function prototypes for
  LOWIInternalMessage

Copyright (c) 2015 Qualcomm Technologies, Inc.
All Rights Reserved.
Confidential and Proprietary - Qualcomm Technologies, Inc.
=============================================================================*/
#include <base_util/postcard.h>
#include <inc/lowi_const.h>
#include <inc/lowi_mac_address.h>
#include <inc/lowi_request.h>

namespace qc_loc_fw
{
class LOWIUtils;
/**
 * Base class for all internal messages LOWI can handle. Internal messages are
 * messages coming from modules such as the wifi driver, etc; not from
 * external clients. External clients use LOWIRequest.
 */
class LOWIInternalMessage : public LOWIRequest
{
private:

public:
/** Internal message types */
enum eLowiInternalMessage
{
  LOWI_IMSG_FTM_RANGE_REQ        = 0,
  LOWI_IMSG_FTM_RANGE_RPRT = 1
};

/** Log Tag */
  static const char * const TAG;

  /**
   * Constructor
   * @param uint32 Request Id generated by the client
   */
  LOWIInternalMessage (uint32 msgId);

  /** Destructor*/
  virtual ~LOWIInternalMessage ();
  /**
   * Creates an InPostcard and inserts the measurement pointer
   * as a blob to it.
   * @param LOWIMeasurementResult* Scan Measurements
   * @return InPostcard
   */

  static InPostcard * createPostcard (LOWIInternalMessage *req);

  /**
   * Parses the InPostcard and retrieves the internal message pointer
   * stored as a blob in it
   * @param InPostcard *card
   * @return LOWIInternalMessage pointer
   */
  static LOWIInternalMessage * parseInternalMessage (InPostcard* card);

  /**
   * Returns the request type
   * @return eRequestType type of request
   */
  virtual eRequestType getRequestType () const;

  /**
   * Returns the LOWI internal message type
   * @return eLowiInternalMessage type of request
   */
   virtual eLowiInternalMessage getInternalMessageType () const = 0;
};

///////////////////////////
// FTMRR Message
///////////////////////////

/**
 * FTMRR Message
 */
class LOWIFTMRangeReqMessage: public LOWIInternalMessage
{
private:

  /** BSSID of the AP requesting the FTMRR */
  LOWIMacAddress mRequesterBssid;

  /** BSSID of the wifi node servicing the FTMRR */
  LOWIMacAddress mSelfBssid;

  /** Channel frequency at which wifi node is associated with AP */
  uint32 mFrequency;

  /**
   * Dynamic array containing a list of wifi nodes and the
   * relevant information for thoses wifi nodes to be scanned.
   *
   * NOTE:
   * There may be a limit to the number of wifi nodes that can
   * be scanned in a single request. The user of this interface
   * may want to inquire what that is at the time of use.
   */
  vector <LOWIPeriodicNodeInfo> mNodeInfo;

  /** Dialog token that came in the FTM Range request and that needs to be
   *   returned in the measurement report response
   */
  uint32 mDiagToken;

  /** Measurement token for the measurement element within the FTM Range
   *  request. It needs to be returned in the measurement report response
   */
  uint32 mMeasToken;

public:
  /**
   * Constructor
   * @param uint32 Request id. This will be echoed back in the corresponding
   *               response.
   */
  /**
   * Constructor
   *
   * @param msgId. This will be echoed back in the corresponding response (if
   *             any). Also, used for easier debugging.
   * @param v: wifi nodes to be FTM'ed with
   * @param bssid: mac address of the AP requesting the FTM events
   * @param selfBssid: mac address of the node sending the message
   * @param frequency: frequency at which wifi node is associated with AP
   * @param mDToken: dialog token for the request
   * @param mMToken: measurement token for the FTM element in the request
   */
  LOWIFTMRangeReqMessage (uint32 msgId, vector<LOWIPeriodicNodeInfo> &v, LOWIMacAddress & bssid,
                    LOWIMacAddress & selfBssid, uint32 freq, uint32 mDToken, uint32 mMToken);

  /** Destructor*/
  virtual ~LOWIFTMRangeReqMessage ();

  /**
   * Returns the mac address of the AP that requested the FTM Report
   * @return LOWIMacAddress&: requester's mac address
   */
  LOWIMacAddress & getRequesterBssid();

  /**
   * Returns the mac address of the wifi node servicing the FTM Request
   * @return LOWIMacAddress&: self mac address
   */
  LOWIMacAddress & getSelfBssid();

  /** Returns the channel frequency at which wifi node is associated with AP */
  uint32 getFrequency() const;

  /**
   * returns the dialog token passed by the FTMR requester
   * @return uint32: dialog token
   */
  uint32 getDiagToken() const;

  /**
   * returns the measurement token passed by the FTMR requester for the FTM
   * element
   * @return uint32: measurement token
   */
  uint32 getMeasToken() const;

  /**
   * Returns the Dynamic array containing the LOWINodeInfo
   * @return Dynamic array containing the LOWINodeInfo
   */
  vector <LOWIPeriodicNodeInfo> & getNodes ();

  /**
   * Returns the LOWI internal message type
   * @return eLowiInternalMessage type of request
   */
   virtual eLowiInternalMessage getInternalMessageType () const;
};

/** Information related to successful range measurement with a single AP  */
struct LOWIRangeEntry
{
  /** Contains the least significant 4 octets of the TSF (synchronized with the
   *  associated AP) at the time (± 32 ?s) at which the initial Fine Timing
   *  Measurement frame was transmitted where the timestamps of both the frame
   *  and response frame were successfully measured.
   */
  uint32 measStartTime;
  /** BSSID of AP whose range is being reported */
  LOWIMacAddress bssid;
  /** Estimated range between the requested STA and the AP using the fine timing
   *  measurement procedure, in units of 1/64 m. A value of 216–1 indicates a
   *  range of (216–1)/64 m or higher.
   */
  uint16 range;
  /**
   *  The Max Range Error field contains an upper bound for the error in the
   *  value specified in the Range field, in units of 1/64 m. A value of
   *  zero indicates an unknown error. A value of 216–1 indicates error of
   *  (216-1)/64 m or higher. For instance, a value of 128 in the Max Range
   *  Error field indicates that the value in the Range field has a maximum
   *  error of ± 2 m.
   */
  uint16 maxErrRange;
  /** Reserved field   */
  uint8  reserved;
};

/** Error report codes related to failure range measurement */
enum LOWIMeasRptrErrCodes
{
  /** AP reported "Request incapable" */
  REQ_INCAPABLE_AP = 2,
  /** AP reported "Request failed. Do not send new request for a specified
   *  period */
  REQ_FAILED_AT_AP = 3,
  /** Unable to successfully transmit to AP */
  TX_FAIL  = 8
};

/** Information related to failure range measurement with a single AP */
struct LOWIErrEntry
{
  /** Contains the least significant 4 octets of the TSF (synchronized with the
   *  associated AP) at the time (± 32 us) at which the Fine Timing Measurement
   *  failure was first detected.
   */
  uint32 measStartTime;
  /** BSSID of AP whose range is being reported */
  LOWIMacAddress bssid;
  /** Error report code */
  enum LOWIMeasRptrErrCodes errCode;
};

///////////////////////////
// FTMRR Report Message
///////////////////////////
/**
 * FTMRR Report Message
 */
class LOWIFTMRangeRprtMessage: public LOWIInternalMessage
{
private:

  /** mac address of AP that requested the FTMR */
  LOWIMacAddress mRequesterBssid;

  /** mac address of wifi node requesting the FTMR Report */
  LOWIMacAddress mSelfBssid;

  /** Channel frequency at which wifi node is associated with AP */
  uint32 mFrequency;

  /** Dialog token that came in the FTM Range request and that needs to be
   *   returned in the measurement report response
   */
  uint32 mDiagToken;

  /** Measurement token for the measurement element within the FTM Range
   *  request. It needs to be returned in the measurement report response
   */
  uint32 mMeasToken;

  /** successful FTMs */
  vector<LOWIRangeEntry> measInfoSuccess;

  /** unsuccessful FTMs */
  vector<LOWIErrEntry>   measInfoErr;

public:
  /**
   * Constructor
   * @param msgId: scheduler generated request identifier
   * @param bssid: mac address of the AP requesting the FTM events
   * @param selfBssid: mac address of the node sending the message
   * @param frequency: frequency at which wifi node is associated with AP
   * @param dToken: dialog token for the request
   * @param mToken: measurement token for the FTM element in the request
   * @param vR: vector of successful entries
   * @param vE  vector of error entries
   */
  LOWIFTMRangeRprtMessage(uint32 msgId,
                          LOWIMacAddress & bssid,
                          LOWIMacAddress & selfBssid,
                          uint32 frequency,
                          uint32 dToken,
                          uint32 mToken,
                          vector<LOWIRangeEntry> &vR,
                          vector<LOWIErrEntry> &vE);

  /** Destructor*/
  virtual ~LOWIFTMRangeRprtMessage();

  /**
   * Returns the mac address of the AP that requested the FTM Report
   * @return LOWIMacAddress&: requester's mac address
   */
  LOWIMacAddress & getRequesterBssid();

  /**
   * Returns the mac address of the wifi node servicing the FTM Request
   * @return LOWIMacAddress&: self mac address
   */
  LOWIMacAddress & getSelfBssid();

  /** Returns the channel frequency at which wifi node is associated with AP */
  uint32 getFrequency() const;

  /**
   * returns the dialog token passed by the FTMR requester
   * @return uint32: dialog token
   */
  uint32 getDiagToken() const;

  /**
   * returns the measurement token passed by the FTMR requester for the FTM
   * element
   * @return uint32: measurement token
   */
  uint32 getMeasToken() const;

  /**
   * Returns a reference to the vector containing the measurement success APs
   * @return vector<LOWIRangeEntry>&
   */
  vector <LOWIRangeEntry> & getSuccessNodes ();

  /**
   * Returns a reference to the vector containing the measurement error APs
   * @return vector<LOWIErrEntry>&
   */
  vector <LOWIErrEntry> & getErrNodes ();

  /**
   * Returns the LOWI internal message type
   * @return eLowiInternalMessage type of request
   */
   virtual eLowiInternalMessage getInternalMessageType () const;
};

}// namespace qc_loc_fw

#endif //#ifndef __LOWI_INTERNAL_MESSAGE_H__
