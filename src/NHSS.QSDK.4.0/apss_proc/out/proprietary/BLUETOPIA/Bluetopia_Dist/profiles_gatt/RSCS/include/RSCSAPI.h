/****< rscsapi.h >*************************************************************/
/*      Copyright 2013 - 2014 Stonestreet One.                                */
/*      All Rights Reserved.                                                  */
/*                                                                            */
/*  RSCSAPI - Stonestreet One Bluetooth Running Speed and Cadence Service     */
/*           (GATT based) API Type Definitions, Constants, and Prototypes.    */
/*                                                                            */
/*  Author:  Ajay Parashar                                                    */
/*                                                                            */
/*** MODIFICATION HISTORY *****************************************************/
/*                                                                            */
/*   mm/dd/yy  F. Lastname    Description of Modification                     */
/*   --------  -----------    ------------------------------------------------*/
/*   01/22/13  A. Parashar    Initial creation.                               */
/******************************************************************************/
#ifndef __RSCSAPIH__
#define __RSCSAPIH__

#include "SS1BTPS.h"        /* Bluetooth Stack API Prototypes/Constants.      */
#include "SS1BTGAT.h"       /* Bluetooth Stack GATT API Prototypes/Constants. */
#include "RSCSType.h"       /* Running Speed Cadence Service Types/Constants. */

   /* Error Return Codes.                                               */

   /* Error Codes that are smaller than these (less than -1000) are     */
   /* related to the Bluetooth Protocol Stack itself (see BTERRORS.H).  */
#define RSCS_ERROR_INVALID_PARAMETER                       (-1000)
#define RSCS_ERROR_INVALID_BLUETOOTH_STACK_ID              (-1001)
#define RSCS_ERROR_INSUFFICIENT_RESOURCES                  (-1002)
#define RSCS_ERROR_INSUFFICIENT_BUFFER_SPACE               (-1003)
#define RSCS_ERROR_SERVICE_ALREADY_REGISTERED              (-1004)
#define RSCS_ERROR_INVALID_INSTANCE_ID                     (-1005)
#define RSCS_ERROR_MALFORMATTED_DATA                       (-1006)
#define RSCS_ERROR_INDICATION_OUTSTANDING                  (-1007)

   /* The following structure contains the Handles that will need to be */
   /* cached by a RSCS client in order to only do service discovery     */
   /* once.                                                             */
typedef struct _tagRSCS_Client_Information_t
{
   Word_t RSC_Measurement;
   Word_t RSC_Measurement_Client_Configuration;
   Word_t RSC_Feature;
   Word_t Sensor_Location;
   Word_t SC_Control_Point;
   Word_t SC_Control_Point_Client_Configuration;
} RSCS_Client_Information_t;

#define RSCS_CLIENT_INFORMATION_DATA_SIZE                  (sizeof(RSCS_Client_Information_t))

   /* The following structure contains all of the per Client data that  */
   /* will need to be stored by a RSCS Server.                          */
typedef struct _tagRSCS_Server_Information_t
{
   Word_t RSC_Measurement_Client_Configuration;
   Word_t SC_Control_Point_Client_Configuration;

} RSCS_Server_Information_t;

#define RSCS_SERVER_INFORMATION_DATA_SIZE                  (sizeof(RSCS_Server_Information_t))

   /* The following structure contains RSC measurement data that is     */
   /* passed to the function that builds the RSC Measurement packet.    */
typedef struct _tagRSCS_RSC_Measurement_Data_t
{
   Byte_t  Flags;
   Word_t  Instantaneous_Speed;
   Byte_t  Instantaneous_Cadence;
   Word_t  Instantaneous_Stride_Length;
   DWord_t Total_Distance;
} RSCS_RSC_Measurement_Data_t;

#define RSCS_RSC_MEASUREMENT_DATA_SIZE                     (sizeof(RSCS_RSC_Measurement_Data_t))

   /* The following define the valid Read Request types that a server   */
   /* may receive in a etRCS_Server_Read_Client_Configuration_Request or*/
   /* etRSC_Server_Client_Configuration_Update event.  This is also used*/
   /* by the RSC_Send_Notification to denote the characteristic value to*/
   /* notify.                                                           */
   /* * NOTE * For each event it is up to the application to return (or */
   /*          write) the correct Client Configuration descriptor based */
   /*          on this value.                                           */
typedef enum
{
   ctRSCMeasurement,
   ctRSCControlPoint
} RSCS_Characteristic_Type_t;

   /* The following enumeration covers all the events generated by the  */
   /* RSC Profile.  These are used to determine the type of each event  */
   /* generated, and to ensure the proper union element is accessed for */
   /* the RSCS_Event_Data_t structure.                                  */
typedef enum
{
   etRSCS_Read_Client_Configuration_Request,
   etRSCS_Client_Configuration_Update,
   etRSCS_SC_Control_Point_Command,
   etRSCS_Confirmation_Data
} RSCS_Event_Type_t;

   /* The following is dispatched to a RSC Server when a RSC Client     */
   /* is attempting to read the Client Configuration descriptor.  The   */
   /* ConnectionID, and RemoteDevice identifies the Client that is      */
   /* making the request.  The TransactionID specifies the TransactionID*/
   /* of the request, this can be used when responding to the request   */
   /* using the RSCS_Client_Configuration_Read_Response() API function. */
typedef struct _tagRSCS_Read_Client_Configuration_Data_t
{
   unsigned int               InstanceID;
   unsigned int               ConnectionID;
   unsigned int               TransactionID;
   GATT_Connection_Type_t     ConnectionType;
   BD_ADDR_t                  RemoteDevice;
   RSCS_Characteristic_Type_t ClientConfigurationType;
} RSCS_Read_Client_Configuration_Data_t;

#define RSCS_READ_CLIENT_CONFIGURATION_DATA_SIZE           (sizeof(RSCS_Read_Client_Configuration_Data_t))

   /* The following is dispatched to a RSCS Server when a RSC Client    */
   /* attempts to write to a Client Configuration descriptor.  The      */
   /* ConnectionID and RemoteDevice identify the Client that is making  */
   /* the update request.  The ClientConfiguration value specifies the  */
   /* new Client Configuration value.                                   */
typedef struct _tagRSCS_Client_Configuration_Update_Data_t
{
   unsigned int               InstanceID;
   unsigned int               ConnectionID;
   unsigned int               TransactionID;
   GATT_Connection_Type_t     ConnectionType;
   BD_ADDR_t                  RemoteDevice;
   RSCS_Characteristic_Type_t ClientConfigurationType;
   Word_t                     ClientConfiguration;
} RSCS_Client_Configuration_Update_Data_t;

#define RSCS_CLIENT_CONFIGURATION_UPDATE_DATA_SIZE         (sizeof(RSCS_Client_Configuration_Update_Data_t))

#define MAXIMUM_SUPPORTED_SENSOR_LOCATIONS                 (17)

   /* The following defines the format of a Supported Sensor Location   */
   /* Values that will be used to respond to Supported Sensor Locations */
   /* request made by remote device. The first member represents the    */
   /* Byte array of multiple Sensor Locations. The second member        */
   /* represents Number of Sensor Locations available in the Byte array */
typedef struct _tagRSCS_RSCP_Supported_Sensor_Locations_t
{
   Byte_t      SensorLocations[MAXIMUM_SUPPORTED_SENSOR_LOCATIONS];
   Byte_t      NumberOfSensorLocations;
} RSCS_SCCP_Supported_Sensor_Locations_t;

#define RSCS_SCCP_SUPPORTED_SENSOR_LOCATIONS_SIZE          (sizeof(RSCS_SCCP_Supported_Sensor_Locations_t))

   /* The following enumerates the valid values that may be set as the  */
   /* value for the OpCode field of SC Control Point characteristic.    */
typedef enum
{
   sccSetCumulativeValue             = RSCS_SC_CONTROL_POINT_OPCODE_SET_CUMULATIVE_VALUE,
   sccStartSensorCalibration         = RSCS_SC_CONTROL_POINT_OPCODE_START_SENSOR_CALIBRATION,
   sccUpdateSensorLocation           = RSCS_SC_CONTROL_POINT_OPCODE_UPDATE_SENSOR_LOCATION,
   sccRequestSupportedSensorLocation = RSCS_SC_CONTROL_POINT_OPCODE_REQUEST_SUPPORTED_SENSOR_LOCATIONS
} RSCS_SCCP_Command_Type_t;

   /* The following enumerates the valid values that may be set as the  */
   /* value for the Response Opcode field of Specific Operation Control */
   /* Point characteristic.                                             */
typedef enum
{
   sccSuccess            = RSCS_SC_CONTROL_POINT_RESPONSE_CODE_SUCCESS,
   sccOpcodeNotSupported = RSCS_SC_CONTROL_POINT_RESPONSE_OPCODE_NOT_SUPPORTED,
   sccInvalidParameter   = RSCS_SC_CONTROL_POINT_RESPONSE_INVALID_PARAMETER,
   sccOperationFailed    = RSCS_SC_CONTROL_POINT_RESPONSE_OPERATION_FAILED
} RSCS_SCCP_Response_Value_t;

   /* The following structure defines the format of the RSCS SC         */
   /* operations Control Point Command Request Data.This structure is   */
   /* passed as a parameter to                                          */
   /* RSCS_Format_SC_Control_Point_Command API                          */
typedef struct _tagRSCS_SC_Control_Point_Format_Data_t
{
   RSCS_SCCP_Command_Type_t CommandType;
   union
   {
      DWord_t CumulativeValue;
      Byte_t  SensorLocation;
   } FilterParameters;
} RSCS_SC_Control_Point_Format_Data_t;

#define RSCS_SC_CONTROL_POINT_FORMAT_DATA_SIZE             (sizeof(RSCS_SC_Control_Point_Format_Data_t))

   /* The following defines the format of a SC Control Point Response   */
   /* Data. This structure will hold the SOCP response data received    */
   /* from remote RSC Server. The first member specifies the Response   */
   /* OPCode. The second member is request opCode and the last member   */
   /* is a response Data                                                */
typedef struct _tagRSCS_SC_Control_Point_Response_Data_t
{
   Byte_t                                 ResponseOpCode;
   RSCS_SCCP_Command_Type_t               RequestOpCode;
   RSCS_SCCP_Supported_Sensor_Locations_t SupportedSensorLocations;
} RSCS_SC_Control_Point_Response_Data_t;

#define RSCS_SC_CONTROL_POINT_RESPONSE_DATA_SIZE           (sizeof(RSCS_SC_Control_Point_Response_Data_t))

   /* The following is dispatched to a RSC Server in response to the    */
   /* reception of request from a Client to write to the SC Control     */
   /* Point.                                                            */
typedef struct _tagRSCS_SC_Control_Point_Command_Data_t
{
   unsigned int                        InstanceID;
   unsigned int                        ConnectionID;
   unsigned int                        TransactionID;
   GATT_Connection_Type_t              ConnectionType;
   BD_ADDR_t                           RemoteDevice;
   RSCS_SC_Control_Point_Format_Data_t FormatData;
} RSCS_SC_Control_Point_Command_Data_t;

#define RSCS_SC_CONTROL_POINT_COMMAND_DATA_SIZE            (sizeof(RSCS_SC_Control_Point_Command_Data_t))

   /* The following RSC Profile Event is dispatched to a RSC Server     */
   /* when a RSC Client has sent a confirmation to a previously sent    */
   /* confirmation.  The ConnectionID, ConnectionType, and RemoteDevice */
   /* specifiy the Client that is making the update.  The               */
   /* Characteristic_Type specifies which Indication the Client has sent*/
   /* a confirmation for.  The final parameter specifies the status of  */
   /* the Indication                                                    */
   /* * NOTE * The Characteristic_Type parameter will NEVER be set to   */
   /*          ctIntermediateTemperature for this event.                */
   /* * NOTE * The Status member is set to one of the following values: */
   /*                GATT_CONFIRMATION_STATUS_SUCCESS                   */
   /*                GATT_CONFIRMATION_STATUS_TIMEOUT                   */
typedef struct _tagRSCS_Confirmation_Data_t
{
   unsigned int               InstanceID;
   unsigned int               ConnectionID;
   GATT_Connection_Type_t     ConnectionType;
   BD_ADDR_t                  RemoteDevice;
   RSCS_Characteristic_Type_t CharacteristicType;
   Byte_t                     Status;
} RSCS_Confirmation_Data_t;

#define RSCS_CONFIRMATION_DATA_SIZE                        (sizeof(RSCS_Confirmation_Data_t))

   /* The following structure represents the container structure for    */
   /* holding all RSC Profile Event Data.  This structure is received   */
   /* for each event generated.  The Event_Data_Type member is used to  */
   /* determine the appropriate union member element to access the      */
   /* contained data.  The Event_Data_Size member contains the total    */
   /* size of the data contained in this event.                         */
typedef struct _tagRSCS_Event_Data_t
{
   RSCS_Event_Type_t Event_Data_Type;
   Word_t            Event_Data_Size;
   union
   {
      RSCS_Read_Client_Configuration_Data_t   *RSCS_Read_Client_Configuration_Data;
      RSCS_Client_Configuration_Update_Data_t *RSCS_Client_Configuration_Update_Data;
      RSCS_SC_Control_Point_Command_Data_t    *RSCS_SC_Control_Point_Command_Data;
      RSCS_Confirmation_Data_t                *RSCS_Confirmation_Data;
   } Event_Data;
} RSCS_Event_Data_t;

#define RSCS_EVENT_DATA_SIZE                               (sizeof(RSCS_Event_Data_t))

   /* The following declared type represents the Prototype Function for */
   /* a RSCS Profile Event Receive Data Callback.  This function will   */
   /* be called whenever an RSCS Profile Event occurs that is           */
   /* associated with the specified Bluetooth Stack ID.  This function  */
   /* passes to the caller the Bluetooth Stack ID, the RSCS Event Data  */
   /* that occurred and the RSCS Profile Event Callback Parameter that  */
   /* was specified when this Callback was installed.  The caller is    */
   /* free to use the contents of the RSCS Profile Event Data ONLY in   */
   /* the context of this callback.  If the caller requires the Data for*/
   /* a longer period of time, then the callback function MUST copy the */
   /* data into another Data Buffer This function is guaranteed NOT to  */
   /* be invoked more than once simultaneously for the specified        */
   /* installed callback (i.e.  this function DOES NOT have be          */
   /* re-entrant).  It needs to be noted however, that if the same      */
   /* Callback is installed more than once, then the callbacks will be  */
   /* called serially.  Because of this, the processing in this function*/
   /* should be as efficient as possible.  It should also be noted that */
   /* this function is called in the Thread Context of a Thread that the*/
   /* User does NOT own.  Therefore, processing in this function should */
   /* be as efficient as possible (this argument holds anyway because   */
   /* another RSCS Profile Event will not be processed while this       */
   /* function call is outstanding).                                    */
   /* ** NOTE ** This function MUST NOT Block and wait for events that  */
   /*            can only be satisfied by Receiving RSCS Profile Event  */
   /*            Packets.  A Deadlock WILL occur because NO RSCS Event  */
   /*            Callbacks will be issued while this function is        */
   /*            currently outstanding.                                 */
typedef void (BTPSAPI *RSCS_Event_Callback_t)(unsigned int BluetoothStackID, RSCS_Event_Data_t *RSCS_Event_Data, unsigned long CallbackParameter);

   /* RSCS Server API.                                                  */

   /* The following function is responsible for opening a RSCS Server.  */
   /* The first parameter is the Bluetooth Stack ID on which to open the*/
   /* server.  The second parameter is the Callback function to call    */
   /* when an event occurs on this Server Port.  The third parameter is */
   /* a user-defined callback parameter that will be passed to the      */
   /* callback function with each event.  The final parameter is a      */
   /* pointer to store the GATT Service ID of the registered RSCS       */
   /* service.  This can be used to include the service registered by   */
   /* this call.  This function returns the positive, non-zero, Instance*/
   /* ID or a negative error code.                                      */
   /* * NOTE * Only 1 RSCS Server may be open at a time, per Bluetooth  */
   /*          Stack ID.                                                */
   /* * NOTE * All Client Requests will be dispatch to the EventCallback*/
   /*          function that is specified by the second parameter to    */
   /*          this function.                                           */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Initialize_Service(unsigned int BluetoothStackID, RSCS_Event_Callback_t EventCallback, unsigned long CallbackParameter, unsigned int *ServiceID);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Initialize_Service_t)(unsigned int BluetoothStackID, RSCS_Event_Callback_t EventCallback, unsigned long CallbackParameter, unsigned int *ServiceID);
#endif

   /* The following function is responsible for opening a RSCS Server.  */
   /* The first parameter is the Bluetooth Stack ID on which to open the*/
   /* server.  The second parameter is the Callback function to call    */
   /* when an event occurs on this Server Port.  The third parameter is */
   /* a user-defined callback parameter that will be passed to the      */
   /* callback function with each event.  The fourth parameter is a     */
   /* pointer to store the GATT Service ID of the registered RSCS       */
   /* service.  This can be used to include the service registered by   */
   /* this call.  The final parameter is a pointer, that on input can be*/
   /* used to control the location of the service in the GATT database, */
   /* and on ouput to store the service handle range.  This function    */
   /* returns the positive, non-zero, Instance ID or a negative error   */
   /* code.                                                             */
   /* * NOTE * Only 1 RSCS Server may be open at a time, per Bluetooth  */
   /*          Stack ID.                                                */
   /* * NOTE * All Client Requests will be dispatch to the EventCallback*/
   /*          function that is specified by the second parameter to    */
   /*          this function.                                           */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Initialize_Service_Handle_Range(unsigned int BluetoothStackID, RSCS_Event_Callback_t EventCallback, unsigned long CallbackParameter, unsigned int *ServiceID, GATT_Attribute_Handle_Group_t  *ServiceHandleRange);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Initialize_Service_Handle_Range_t)(unsigned int BluetoothStackID, RSCS_Event_Callback_t EventCallback, unsigned long CallbackParameter, unsigned int *ServiceID, GATT_Attribute_Handle_Group_t  *ServiceHandleRange);
#endif

   /* The following function is responsible for closing a previously    */
   /* opened RSC Server.  The first parameter is the Bluetooth Stack    */
   /* ID on which to close the server.  The second parameter is the     */
   /* InstanceID that was returned from a successful call to            */
   /* RSCS_Initialize_Service().  This function returns a zero if       */
   /* successful or a negative return error code if an error occurs.    */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Cleanup_Service(unsigned int BluetoothStackID, unsigned int InstanceID);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Cleanup_Service_t)(unsigned int BluetoothStackID, unsigned int InstanceID);
#endif

   /* The following function is used to perform a suspend of the        */
   /* Bluetooth stack.  This function accepts as input the Bluetooth    */
   /* Stack ID of the Bluetooth Stack that the Device is associated     */
   /* with.  The final two parameters are the buffer size and buffer    */
   /* that Bluetopia is to use to collapse it's state information into. */
   /* This function can be called with BufferSize and Buffer set to 0   */
   /* and NULL, respectively.  In this case this function will return   */
   /* the number of bytes that must be passed to this function in order */
   /* to successfully perform a suspend (or 0 if an error occurred, or  */
   /* this functionality is not supported).  If the BufferSize and      */
   /* Buffer parameters are NOT 0 and NULL, this function will attempt  */
   /* to perform a suspend of the stack.  In this case, this function   */
   /* will return the amount of memory that was used from the provided  */
   /* buffers for the suspend (or zero otherwise).                      */
BTPSAPI_DECLARATION unsigned long BTPSAPI RSCS_Suspend(unsigned int BluetoothStackID, unsigned long BufferSize, void *Buffer);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef unsigned long (BTPSAPI *PFN_RSCS_Suspend_t)(unsigned int BluetoothStackID, unsigned long BufferSize, void *Buffer);
#endif

   /* The following function is used to perform a resume of the         */
   /* Bluetooth stack after a successful suspend has been performed (see*/
   /* RSCS_Suspend()).  This function accepts as input the Bluetooth    */
   /* Stack ID of the Bluetooth Stack that the Device is associated     */
   /* with.  The final two parameters are the buffer size and buffer    */
   /* that contains the memory that was used to collapse Bluetopia      */
   /* context into with a successfull call to RSCS_Suspend().  This     */
   /* function returns ZERO on success or a negative error code.        */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Resume(unsigned int BluetoothStackID, unsigned long BufferSize, void *Buffer);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Resume_t)(unsigned int BluetoothStackID, unsigned long BufferSize, void *Buffer);
#endif

   /* The following function is responsible for querying the number of  */
   /* attributes that are contained in the RSCS Service that is         */
   /* registered with a call to RSCS_Initialize_Service().  This        */
   /* function returns the non-zero number of attributes that are       */
   /* contained in an RSCS Server or zero on failure.                   */
BTPSAPI_DECLARATION unsigned int BTPSAPI RSCS_Query_Number_Attributes(void);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef unsigned int (BTPSAPI *PFN_RSCS_Query_Number_Attributes_t)(void);
#endif

   /* The following function is responsible for responding to a RSCSRead*/
   /* Client Configuration Request.  The first parameter is the         */
   /* Bluetooth Stack ID of the Bluetooth Device.  The second parameter */
   /* is the InstanceID returned from a successful call to              */
   /* RSCS_Initialize_Server().  The third is the Transaction ID of the */
   /* request.  The final parameter contains the Client Configuration to*/
   /* send to the remote device.  This function returns a zero if       */
   /* successful or a negative return error code if an error occurs.    */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Read_Client_Configuration_Response(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int TransactionID, Word_t ClientConfiguration);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Read_Client_Configuration_Response_t)(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int TransactionID, Word_t ClientConfiguration);
#endif

   /* The following function is responsible for sending an RSC          */
   /* Measurement notification to a specified remote device.  The first */
   /* parameter is the Bluetooth Stack ID of the Bluetooth Device.  The */
   /* second parameter is the InstanceID returned from a successful call*/
   /* to RSCS_Initialize_Server().  The third parameter is the          */
   /* ConnectionID of the remote device to send the notification to.    */
   /* The final parameter is the RSC Measurement Data strcuture that    */
   /* contains all of the required and optional data for the            */
   /* notification.  This function returns a zero if successful or a    */
   /* negative return error code if an error occurs.                    */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Notify_RSC_Measurement(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int ConnectionID, RSCS_RSC_Measurement_Data_t *MeasurementData);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Notify_RSC_Measurement_t)(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int ConnectionID, RSCS_RSC_Measurement_Data_t *MeasurementData);
#endif

   /* The following function is responsible for setting the supported   */
   /* RSC features on the specified RSCS Instance.  The first parameter */
   /* is the Bluetooth Stack ID of the Bluetooth Device. The second     */
   /* parameter is the InstanceID returned from a successful call to    */
   /* RSCS_Initialize_Server().  The final parameter is the supported   */
   /* features to set for the specified RSCS Instance.  This function   */
   /* returns a zero if successful or a negative return error code if   */
   /* an error occurs.                                                  */
   /* * NOTE *The SupportedFeatures parameter is a bitmask with the bits*/
   /*  in between                                                       */
   /*RSCS_FEATURE_FLAG_INSTANTANEOUS_STRIDE_LENGTH_MEASUREMENT_SUPPORTED*/
   /* and RSCS_FEATURE_FLAG_MULTIPLE_SENSOR_LOCATIONS_SUPPORTED         */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Set_RSC_Feature(unsigned int BluetoothStackID, unsigned int InstanceID, Word_t SupportedFeatures);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Set_RSC_Feature_t)(unsigned int BluetoothStackID, unsigned int InstanceID, Word_t SupportedFeatures);
#endif

   /* The following function is responsible for querying the RSCS       */
   /* Feature on the specified RSCS Instance.The first parameter is     */
   /* Bluetooth Stack ID of the Bluetooth Device.  The second parameter */
   /* is InstanceID returned from a successful call to                  */
   /* RSCS_Initialize_Server The final parameter is a pointer to return */
   /* the RSCS Feature for the specified RSCS Instance.  This function  */
   /* returns a zero if successful or a negative return error code if an*/
   /* error occurs.                                                     */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Query_RSC_Feature(unsigned int BluetoothStackID, unsigned int InstanceID, Word_t *SupportedFeatures);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Query_RSC_Feature_t)(unsigned int BluetoothStackID, unsigned int InstanceID, Word_t *SupportedFeatures);
#endif

   /* The following function is responsible for setting the Sensor      */
   /* Location on the specified RSCS Instance.  The first parameter is  */
   /* the Bluetooth Stack ID of the Bluetooth Device. The second        */
   /* parameter is the InstanceID returned from a successful call to    */
   /* RSCS_Initialize_Server().  The final parameter is the Sensor      */
   /* Location to set for the specified RSCS Instance.  This function   */
   /* returns a zero if successful or a negative return error code if   */
   /* an error occurs.                                                  */
   /* * NOTE * The SensorLocation parameter should be in a range between*/
   /* RSCS_SENSOR_LOCATION_OTHER to RSCS_SENSOR_LOCATION_REAR_HUB       */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Set_Sensor_Location(unsigned int BluetoothStackID, unsigned int InstanceID, Byte_t SensorLocation);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Set_Sensor_Location_t)(unsigned int BluetoothStackID, unsigned int InstanceID, Byte_t SensorLocation);
#endif

   /* The following function is responsible for querying the RSCS       */
   /* Feature on the specified RSCS Instance.The first parameter is     */
   /* Bluetooth Stack ID of the Bluetooth Device.  The second parameter */
   /* is InstanceID returned from a successful call to                  */
   /* RSCS_Initialize_Server The final parameter is a pointer to return */
   /* the Sensor Location for the specified RSCS Instance.This function */
   /* returns a zero if successful or a negative return error code if an*/
   /* error occurs.                                                     */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Query_Sensor_Location(unsigned int BluetoothStackID, unsigned int InstanceID, Byte_t *SensorLocation);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Query_Sensor_Location_t)(unsigned int BluetoothStackID, unsigned int InstanceID, Byte_t *SensorLocation);
#endif

   /* The following function is responsible to responding to a SC       */
   /* Control Point Command received from a remote device.The first     */
   /* parameter is the Bluetooth Stack ID of the Bluetooth Device.  The */
   /* second is the TransactionID that was received in the SC Control   */
   /* Point event.The final parameter is an error code that is used to  */
   /* determine if the Request is being accepted by the server or if an */
   /* error response should be issued instead.This function returns a   */
   /* zero if successful or a negative return error code if an error    */
   /* occurs.                                                           */
   /* * NOTE * If the ErrorCode parameter is set to 0x00 the Procedure  */
   /*          Request will be accepted.                                */
   /* * NOTE * If the ErrorCode is non-zero than an error response will */
   /*          be sent to the remote device.                            */
   /* * NOTE * This function is primarily provided to allow a way to    */
   /*          reject SC Control Point commands when the Server has not */
   /*          been configured properly for SCCP operation or a SCCP    */
   /*          procedure with the Client is already in progress.  All   */
   /*          other reasons should return ZERO for the ErrorCode and   */
   /*          then send SCCP Result indication to indicate any other   */
   /*          errors.  For Example: If the Opcode in the Request is not*/
   /*          supported by the Server this API should be called with   */
   /*          ErrorCode set to ZERO and then the                       */
   /*          RSCS_Indicate_SC_Control_Point_Result() should be called */
   /*          with the ResponseCode set to                             */
   /*          RSCS_SC_RESPONSE_OPCODE_NOT_SUPPORTED.                   */
BTPSAPI_DECLARATION int BTPSAPI RSCS_SC_Control_Point_Response(unsigned int BluetoothStackID, unsigned int TransactionID, Byte_t ErrorCode);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *RSCS_SC_Control_Point_Response_t)(unsigned int BluetoothStackID, unsigned int TransactionID, Byte_t ErrorCode);
#endif

   /* The following function is responsible for sending a SC Control    */
   /* Control Point indication to a specified remote device.            */
   /* The first parameter is the Bluetooth Stack ID of the Bluetooth    */
   /* Device.The second parameter is the InstanceID returned from a     */
   /* successful call to RSCS_Initialize_Server(). The third parameter  */
   /* the ConnectionID of the remote device to send the indication to.  */
   /* The fourth parameter is the Request data to indicate.  The last   */
   /* parameter is response code .This function returns a zero if       */
   /* successful or a negative return error code if an error occurs.    */
   /* * NOTE * Only 1 SCCP Request indication may be outstanding per    */
   /*          RSC Instance.                                            */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Indicate_SC_Control_Point_Result(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int ConnectionID, RSCS_SCCP_Command_Type_t CommandType, Byte_t ResponseCode);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Indicate_SC_Control_Point_Result_t)(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int ConnectionID, RSCS_SCCP_Command_Type_t CommandType, Byte_t ResponseCode);
#endif

   /* The following function is responsible for sending a Supported     */
   /* Sensor Locations indication to a specified remote device.         */
   /* The first parameter is the Bluetooth Stack ID of the Bluetooth    */
   /* Device.The second parameter is the InstanceID returned from a     */
   /* successful call to RSCS_Initialize_Server(). The third parameter  */
   /* the ConnectionID of the remote device to send the indication to.  */
   /* The fourth parameter is the Request data to indicate.  The last   */
   /* parameter is pointer to list of supported sensor locations to be  */
   /* indicated.This function returns a zero if successful or a negative*/
   /* return error code if an error occurs.                             */
   /* * NOTE * Only 1 SCCP Request indication may be outstanding per    */
   /*          RSCS Instance.                                           */

BTPSAPI_DECLARATION int BTPSAPI RSCS_Indicate_Supported_Sensor_Locations(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int ConnectionID, RSCS_SCCP_Supported_Sensor_Locations_t *SupportedSensorLocations);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Indicate_Supported_Sensor_Locations_t)(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int ConnectionID, RSCS_SCCP_Supported_Sensor_Locations_t *SupportedSensorLocations);
#endif

   /* RSCS Client API.                                                  */

   /* The following function is responsible for parsing a value received*/
   /* from a remote RSCS Server interpreting it as a RSC Measurement    */
   /* characteristic.  The first parameter is the length of the value   */
   /* returned by the remote RSCS Server.  The second parameter is a    */
   /* pointer to the data returned by the remote RSCS Server. The final */
   /* parameter is a pointer to store the parsed RSC Measurement value. */
   /* This function returns a zero if successful or a negative return   */
   /* error code if an error occurs.                                    */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Decode_RSC_Measurement(unsigned int ValueLength, Byte_t *Value, RSCS_RSC_Measurement_Data_t *MeasurementData);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Decode_RSC_Measurement_t)(unsigned int ValueLength, Byte_t *Value, RSCS_RSC_Measurement_Data_t *MeasurementData);
#endif

   /* The following function is responsible for formatting a SC Control */
   /* Point Command into a user specified buffer.The first parameter is */
   /* the input command to format. The second parameter is size of the  */
   /* input SC Control Point Request Data. The final parameter is the   */
   /* output that will contain data in Buffer after formatting.This     */
   /* function returns a zero if successful or a negative error code if */
   /* an error occurs.                                                  */
   /* * NOTE * The third parameter BufferLength is the size of input    */
   /*          request and the same will hold the size of output Buffer */
   /*          after formatting.                                        */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Format_SC_Control_Point_Command(RSCS_SC_Control_Point_Format_Data_t *FormatData, unsigned int *BufferLength, Byte_t *Buffer);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Format_SC_Control_Point_Command_t)(RSCS_SC_Control_Point_Format_Data_t *FormatData, unsigned int *BufferLength, Byte_t *Buffer);
#endif

   /* The following function is responsible for parsing a value received*/
   /* from a remote RSCS Server interpreting it as a response code of   */
   /* SC control point.The first parameter is the length of the value   */
   /* returned by the remote RSCS Server.The second parameter is a      */
   /* pointer to the data returned by the remote RSCS Server.The final  */
   /* parameter is a pointer to store the parsed SC Control Point       */
   /* Response data value.This function returns a zero if successful or */
   /* a negative return error code if an error occurs.                  */
BTPSAPI_DECLARATION int BTPSAPI RSCS_Decode_SC_Control_Point_Response(unsigned int ValueLength, Byte_t *Value, RSCS_SC_Control_Point_Response_Data_t *SCCPResponseData);

#ifdef INCLUDE_BLUETOOTH_API_PROTOTYPES
   typedef int (BTPSAPI *PFN_RSCS_Decode_SC_Control_Point_Response_t)(unsigned int ValueLength, Byte_t *Value, RSCS_SC_Control_Point_Response_Data_t *SCCPResponseData);
#endif

#endif

