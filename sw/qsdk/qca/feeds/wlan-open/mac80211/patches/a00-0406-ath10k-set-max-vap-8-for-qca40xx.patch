--- a/drivers/net/wireless/ath/ath10k/mac.c
+++ b/drivers/net/wireless/ath/ath10k/mac.c
@@ -7795,6 +7795,36 @@ static const struct ieee80211_iface_comb
 	},
 };
 
+static const struct ieee80211_iface_limit ath10k_qca40xx_10_4_if_limits[] = {
+	{
+		.max	= 1,
+		.types	= BIT(NL80211_IFTYPE_STATION),
+	},
+	{
+		.max	= 8,
+		.types	= BIT(NL80211_IFTYPE_AP)
+#ifdef CPTCFG_MAC80211_MESH
+			| BIT(NL80211_IFTYPE_MESH_POINT)
+#endif
+	},
+};
+
+static const struct ieee80211_iface_combination ath10k_qca40xx_10_4_if_comb[] = {
+	{
+		.limits = ath10k_qca40xx_10_4_if_limits,
+		.n_limits = ARRAY_SIZE(ath10k_qca40xx_10_4_if_limits),
+		.max_interfaces = 8,
+		.num_different_channels = 1,
+		.beacon_int_infra_match = true,
+#ifdef CPTCFG_ATH10K_DFS_CERTIFIED
+		.radar_detect_widths =	BIT(NL80211_CHAN_WIDTH_20_NOHT) |
+					BIT(NL80211_CHAN_WIDTH_20) |
+					BIT(NL80211_CHAN_WIDTH_40) |
+					BIT(NL80211_CHAN_WIDTH_80),
+#endif
+	},
+};
+
 static void ath10k_get_arvif_iter(void *data, u8 *mac,
 				  struct ieee80211_vif *vif)
 {
@@ -8016,9 +8046,17 @@ int ath10k_mac_register(struct ath10k *a
 			ARRAY_SIZE(ath10k_10x_if_comb);
 		break;
 	case ATH10K_FW_WMI_OP_VERSION_10_4:
-		ar->hw->wiphy->iface_combinations = ath10k_10_4_if_comb;
-		ar->hw->wiphy->n_iface_combinations =
-			ARRAY_SIZE(ath10k_10_4_if_comb);
+		if (QCA_REV_40XX(ar)) {
+			ar->hw->wiphy->iface_combinations =
+				ath10k_qca40xx_10_4_if_comb;
+			ar->hw->wiphy->n_iface_combinations =
+				ARRAY_SIZE(ath10k_qca40xx_10_4_if_comb);
+		} else {
+			ar->hw->wiphy->iface_combinations =
+				ath10k_10_4_if_comb;
+			ar->hw->wiphy->n_iface_combinations =
+				ARRAY_SIZE(ath10k_10_4_if_comb);
+		}
 		break;
 	case ATH10K_FW_WMI_OP_VERSION_UNSET:
 	case ATH10K_FW_WMI_OP_VERSION_MAX:
