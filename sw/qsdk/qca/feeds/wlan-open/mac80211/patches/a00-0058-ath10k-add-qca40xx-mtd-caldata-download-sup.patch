--- a/drivers/net/wireless/ath/ath10k/ahb.c
+++ b/drivers/net/wireless/ath/ath10k/ahb.c
@@ -25,7 +25,7 @@
 #include "ahb.h"
 
 static const struct of_device_id ath10k_ahb_of_match[] = {
-	{ .compatible = "qcom,ipq4019-wifi",
+	{ .compatible = "qca,wifi-ipq40xx",
 	  .data = (void *)ATH10K_HW_QCA4019
 	},
 	{ }
@@ -512,10 +512,17 @@ static int ath10k_ahb_resource_init(stru
 	struct device *dev;
 	struct resource *res;
 	int ret;
+	u32 core_id;
 
 	pdev = ar_ahb->pdev;
 	dev = &pdev->dev;
 
+	ret = of_property_read_u32(dev->of_node, "core-id", &core_id);
+	if (ret) {
+		ath10k_err(ar, "failed to get code id: %d\n", ret);
+		goto out;
+	}
+
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
 		ath10k_err(ar, "failed to get memory resource\n");
@@ -575,6 +582,8 @@ static int ath10k_ahb_resource_init(stru
 		goto err_clock_deinit;
 	}
 
+	ar_ahb->core_id = core_id;
+
 	ath10k_dbg(ar, ATH10K_DBG_BOOT, "irq: %d\n", ar_ahb->irq);
 
 	ath10k_dbg(ar, ATH10K_DBG_BOOT, "mem: 0x%p mem_len: %lu gcc mem: 0x%p tcsr_mem: 0x%p\n",
--- a/drivers/net/wireless/ath/ath10k/ahb.h
+++ b/drivers/net/wireless/ath/ath10k/ahb.h
@@ -38,6 +38,8 @@ struct ath10k_ahb {
 	struct reset_control *radio_warm_rst;
 	struct reset_control *radio_srif_rst;
 	struct reset_control *cpu_init_rst;
+
+	u32 core_id;
 };
 
 #ifdef CPTCFG_ATH10K_AHB
--- a/drivers/net/wireless/ath/ath10k/core.c
+++ b/drivers/net/wireless/ath/ath10k/core.c
@@ -19,6 +19,8 @@
 #include <linux/firmware.h>
 #include <linux/of.h>
 #include <asm/byteorder.h>
+#include <linux/mtd/mtd.h>
+#include <linux/vmalloc.h>
 
 #include "core.h"
 #include "mac.h"
@@ -511,6 +513,125 @@ exit:
 	return ret;
 }
 
+static int ath10k_verify_mtd_cal_data_chksum(u32 *data, u32 len)
+{
+	u16 *buf = (u16 *)data;
+	u16 sum;
+	int i;
+
+	sum = 0;
+
+	for (i = 0; i < (len / 2); i++)
+		sum ^= le16_to_cpu(*buf++);
+
+	if (sum != 0xffff)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int ath10k_download_cal_data_mtd(struct ath10k *ar)
+{
+	struct device_node *node;
+	struct mtd_info *mtd;
+	size_t retlen;
+	u32 *buf, addr, len;
+	const char *mtd_name;
+	int ret, i;
+
+	node = ar->dev->of_node;
+	if (!node) {
+		/* Device Tree is optional, don't print any warnings if
+		 * there is no node for ath10k.
+		 */
+		return -ENOENT;
+	}
+
+	ret = of_property_read_u32(node, "qcom,cal-len", &len);
+	if (ret)
+		return -ENOENT;
+
+	ret = of_property_read_u32(node, "qcom,cal-offset", &addr);
+	if (ret)
+		return -ENOENT;
+
+	mtd_name = of_get_property(node, "qcom,mtd-name", NULL);
+	if (!mtd_name)
+		return -ENOENT;
+
+	if (len != ar->hw_params.cal_data_len) {
+		ath10k_warn(ar, "invalid cal data length in DT: %d\n", len);
+		return -EMSGSIZE;
+	}
+
+	ath10k_dbg(ar, ATH10K_DBG_BOOT, "mtd name: %s addr: 0x%x len: %d\n",
+		   mtd_name, addr, len);
+
+	buf = vmalloc(len);
+	if (!buf) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "failed to alloc memory for mtd caldata\n");
+		return -ENOMEM;
+	}
+
+	mtd = get_mtd_device_nm(mtd_name);
+	if (IS_ERR_OR_NULL(mtd)) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "mtd device %s not found to read caldata\n",
+			   mtd_name);
+		ret = PTR_ERR(mtd);
+		goto release_buf;
+	}
+
+	ret = mtd_read(mtd, addr, len, &retlen, (u_char *)buf);
+	if (ret) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "failed to read caldata from mtd device %s: %d\n",
+			   mtd_name, ret);
+		goto release_mtd;
+	}
+
+	if (retlen != len) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "got only %d bytes from mtd (requested: %d)\n",
+			   retlen, len);
+		goto release_mtd;
+	}
+
+	ret = ath10k_verify_mtd_cal_data_chksum(buf, len);
+	if (ret) {
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "checksum verification failed\n");
+		goto release_mtd;
+	}
+
+	for (i = 0; i < (len / 4); i++)
+		buf[i] = cpu_to_le32(buf[i]);
+
+	ret = ath10k_download_board_data(ar, (const void *)buf,
+					 (size_t)len);
+	if (ret) {
+		ath10k_err(ar, "failed to download mtd caldata: %d\n", ret);
+		goto release_mtd;
+	}
+
+	ath10k_dbg(ar, ATH10K_DBG_BOOT,
+		   "cal data downloaded successfully\n");
+
+	put_mtd_device(mtd);
+	vfree(buf);
+
+	return 0;
+
+release_mtd:
+	put_mtd_device(mtd);
+
+release_buf:
+	vfree(buf);
+
+	return ret;
+}
+
 static int ath10k_download_cal_file(struct ath10k *ar,
 				    const struct firmware *file)
 {
@@ -1372,6 +1493,23 @@ static int ath10k_download_cal_data(stru
 		   "pre cal download procedure failed, try cal file: %d\n",
 		   ret);
 
+	ret = ath10k_download_cal_data_mtd(ar);
+	if (ret == 0) {
+		/* Run otp with get chip id param to move downloaded caldata
+		 * content to temporary memory in the target.
+		 */
+		ret = ath10k_core_get_board_id_from_otp(ar);
+		if (ret && ret != -EOPNOTSUPP)
+			return ret;
+
+		/* Download board data and run otp. This step will make sure
+		 * the target derives final version of board specific info
+		 * from board data content and caldata content downloaded in
+		 * previous steps.
+		*/
+		goto done;
+	}
+
 	ret = ath10k_download_cal_file(ar, ar->cal_file);
 	if (ret == 0) {
 		ar->cal_mode = ATH10K_CAL_MODE_FILE;
@@ -2027,6 +2165,8 @@ static int ath10k_core_probe_fw(struct a
 			   "could not load pre cal data: %d\n", ret);
 	}
 
+	ath10k_download_cal_data_mtd(ar);
+
 	ret = ath10k_core_get_board_id_from_otp(ar);
 	if (ret && ret != -EOPNOTSUPP) {
 		ath10k_err(ar, "failed to get board id from otp: %d\n",
